/* The following code was generated by JFlex 1.6.1 */


package miniphp;

class Yytoken{
    Yytoken (String token, String tipo, int linea, int columna){
        this.token = new String(token);
        this.tipo = tipo;
        this.linea = linea;
        this.columna = columna;
    } 
    public String token;
    public String tipo;
    public int linea;
    public int columna;

    public String toString() {
        return "Token : "+token+" C.Lexico: "+tipo+" ["+linea
        + "," +columna + "]";
    }
    
}









/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/ASUS/Documents/GitHub/MiniPHP-Luis-Andrino-1198516/MiniPHP/src/miniphp/MiniPHP.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\61\1\63\1\63\1\62\22\0\1\76\1\54\1\67\1\75"+
    "\1\72\1\0\1\70\1\65\1\47\1\47\1\44\1\41\1\45\1\42"+
    "\1\60\1\43\1\33\1\35\6\34\2\32\1\73\1\46\1\36\1\53"+
    "\1\40\1\37\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\12\1\51"+
    "\1\66\1\52\1\0\1\55\1\0\1\1\1\2\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\12\1\50\1\71\1\50\1\0\6\12\1\64\172\12\60\0\2\56"+
    "\115\0\1\57\u1ea8\0\1\63\1\63\u0100\0\1\74\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\24\2\2\3\1\4\1\5\1\4\4\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\2"+
    "\3\1\1\16\1\0\5\1\1\5\1\17\2\2\1\20"+
    "\6\2\1\0\6\2\1\0\3\2\1\0\1\2\1\0"+
    "\2\2\1\15\6\2\1\0\1\2\5\0\1\21\1\3"+
    "\1\0\2\4\1\22\1\23\1\14\1\0\1\6\1\24"+
    "\4\0\1\21\1\0\1\25\3\0\1\15\7\26\1\0"+
    "\4\2\2\24\1\2\1\0\2\2\1\0\3\2\2\0"+
    "\1\2\2\0\2\2\1\0\3\2\1\0\2\2\2\0"+
    "\2\21\1\0\2\3\2\0\1\2\4\0\2\25\12\26"+
    "\2\0\2\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\1\0\2\2"+
    "\1\0\1\2\1\0\1\27\1\0\4\21\1\0\1\17"+
    "\1\2\4\0\7\26\1\0\3\26\3\0\2\2\1\20"+
    "\1\2\2\0\2\2\5\0\2\21\1\2\3\0\1\30"+
    "\6\26\2\0\2\26\4\0\2\2\2\0\1\2\2\0"+
    "\1\2\2\0\1\2\2\0\5\26\1\0\1\26\1\0"+
    "\1\31\2\26\2\0\1\2\1\0\1\2\2\0\1\2"+
    "\1\0\1\20\1\2\2\0\3\26\3\0\1\2\1\0"+
    "\1\2\1\0\4\26\3\0\1\2\1\0\2\26\1\0"+
    "\2\26\1\0\1\2\2\26\1\0\2\26\1\0\1\2"+
    "\2\26\1\0\1\26\2\0\2\26\15\0\1\32\4\0"+
    "\2\32\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\77"+
    "\0\77\0\77\0\77\0\77\0\u07a1\0\u07a1\0\u07e0\0\u081f"+
    "\0\u085e\0\u089d\0\77\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8"+
    "\0\u0a17\0\77\0\u0a56\0\u0a95\0\u0ad4\0\77\0\u0b13\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u01f8\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u089d"+
    "\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\77\0\u142e\0\77"+
    "\0\77\0\77\0\u146d\0\77\0\u14ac\0\u14eb\0\u152a\0\u1569"+
    "\0\u15a8\0\u15e7\0\u091b\0\77\0\u1626\0\u095a\0\u1665\0\77"+
    "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u01f8\0\77\0\u1998\0\u19d7"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u12f3\0\u1332\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139"+
    "\0\u2178\0\u21b7\0\u091b\0\u095a\0\u21f6\0\u2235\0\u2274\0\u22b3"+
    "\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab"+
    "\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3"+
    "\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b"+
    "\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u01f8"+
    "\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\77\0\u2c0d"+
    "\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05"+
    "\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd"+
    "\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5"+
    "\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed"+
    "\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528\0\77\0\u3567\0\u35a6"+
    "\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e"+
    "\0\u37dd\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996"+
    "\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e"+
    "\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86"+
    "\0\u3dc5\0\77\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f"+
    "\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137"+
    "\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f"+
    "\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527"+
    "\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f"+
    "\0\u475e\0\u479d\0\u47dc\0\u481b\0\u485a\0\u4899\0\u48d8\0\u4917"+
    "\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f"+
    "\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\u4cc8\0\u4d07"+
    "\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81\0\u4ec0\0\77"+
    "\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc\0\u4c4a\0\u4c89\0\u4ffb\0\u503a"+
    "\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11"+
    "\1\12\2\11\1\13\1\14\1\15\1\16\1\17\1\11"+
    "\1\20\1\21\1\22\1\23\1\11\1\24\1\25\1\26"+
    "\1\27\1\30\2\27\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\0"+
    "\1\11\1\55\1\2\1\56\1\57\1\60\1\61\1\62"+
    "\1\2\1\63\1\53\100\0\1\11\1\64\13\11\1\65"+
    "\17\11\17\0\1\11\1\0\1\66\4\0\1\11\13\0"+
    "\21\11\1\67\13\11\17\0\1\11\6\0\1\11\13\0"+
    "\1\70\12\11\1\71\2\11\1\72\16\11\17\0\1\11"+
    "\6\0\1\11\13\0\4\11\1\73\3\11\1\74\24\11"+
    "\17\0\1\11\1\75\5\0\1\11\13\0\13\11\1\76"+
    "\1\11\1\77\11\11\1\100\5\11\17\0\1\11\6\0"+
    "\1\11\13\0\1\101\7\11\1\102\13\11\1\103\10\11"+
    "\17\0\1\11\1\104\5\0\1\11\13\0\35\11\17\0"+
    "\1\11\6\0\1\11\13\0\14\11\1\105\1\106\4\11"+
    "\1\107\12\11\17\0\1\11\1\0\1\110\4\0\1\11"+
    "\13\0\10\11\1\111\24\11\17\0\1\11\1\112\5\0"+
    "\1\11\13\0\4\11\1\113\30\11\17\0\1\11\6\0"+
    "\1\11\13\0\1\114\34\11\17\0\1\11\6\0\1\11"+
    "\13\0\21\11\1\115\13\11\17\0\1\11\6\0\1\11"+
    "\13\0\21\11\1\116\2\11\1\117\10\11\17\0\1\11"+
    "\6\0\1\11\13\0\4\11\1\120\30\11\17\0\1\11"+
    "\6\0\1\11\13\0\23\11\1\121\2\11\1\122\6\11"+
    "\17\0\1\11\6\0\1\11\13\0\21\11\1\123\13\11"+
    "\17\0\1\11\6\0\1\11\13\0\15\11\1\107\17\11"+
    "\17\0\1\11\1\0\1\124\4\0\1\11\13\0\7\11"+
    "\1\125\25\11\17\0\1\11\6\0\1\11\13\0\16\11"+
    "\1\16\16\11\17\0\1\11\6\0\1\11\13\0\35\11"+
    "\17\0\1\11\1\126\5\0\1\11\17\0\1\127\24\0"+
    "\4\27\22\0\1\130\20\0\1\131\2\0\1\127\22\0"+
    "\1\132\1\0\1\133\3\134\22\0\1\130\55\0\1\135"+
    "\1\136\12\0\1\137\62\0\1\136\1\140\111\0\1\136"+
    "\55\0\1\27\1\30\2\27\3\0\1\141\11\0\1\142"+
    "\4\0\1\130\50\0\1\27\1\30\2\27\4\0\1\141"+
    "\10\0\1\142\4\0\1\130\61\0\1\63\1\143\6\0"+
    "\1\142\67\0\1\144\6\0\1\142\76\0\1\33\24\0"+
    "\35\11\17\0\1\145\6\0\1\11\20\0\1\66\6\0"+
    "\1\146\1\147\4\0\1\110\33\0\1\110\43\0\1\150"+
    "\2\0\1\151\101\0\4\152\122\0\1\53\15\0\61\153"+
    "\1\0\3\153\1\154\1\155\10\153\61\156\1\0\4\156"+
    "\1\157\1\154\7\156\70\0\1\160\77\0\1\160\6\0"+
    "\1\161\5\162\1\163\1\164\7\162\1\165\1\162\1\166"+
    "\7\162\23\0\1\167\6\0\1\162\12\0\61\63\4\0"+
    "\12\63\1\0\35\11\17\0\1\11\1\0\1\170\4\0"+
    "\1\11\13\0\3\11\1\115\31\11\17\0\1\11\6\0"+
    "\1\11\13\0\4\11\1\171\30\11\17\0\1\11\6\0"+
    "\1\11\13\0\35\11\17\0\1\11\1\0\1\124\4\0"+
    "\1\11\13\0\1\172\34\11\17\0\1\11\6\0\1\11"+
    "\13\0\15\11\1\173\17\11\17\0\1\11\6\0\1\11"+
    "\13\0\5\11\1\174\27\11\17\0\1\11\6\0\1\11"+
    "\13\0\21\11\1\175\13\11\17\0\1\11\6\0\1\11"+
    "\17\0\1\66\14\0\1\176\55\0\22\11\1\177\12\11"+
    "\17\0\1\11\1\0\1\200\4\0\1\11\13\0\3\11"+
    "\1\201\31\11\17\0\1\11\6\0\1\11\13\0\23\11"+
    "\1\202\11\11\17\0\1\11\1\203\5\0\1\11\13\0"+
    "\13\11\1\204\21\11\17\0\1\11\6\0\1\11\13\0"+
    "\13\11\1\205\21\11\17\0\1\11\6\0\1\11\13\0"+
    "\15\11\1\206\17\11\17\0\1\11\6\0\1\11\26\0"+
    "\1\207\1\0\1\210\61\0\17\11\1\211\15\11\17\0"+
    "\1\11\6\0\1\11\13\0\35\11\17\0\1\11\1\0"+
    "\1\212\4\0\1\11\13\0\35\11\17\0\1\11\1\0"+
    "\1\213\4\0\1\11\35\0\1\213\33\0\1\213\20\0"+
    "\15\11\1\205\17\11\17\0\1\11\1\0\1\203\4\0"+
    "\1\11\30\0\1\207\4\0\1\203\33\0\1\203\20\0"+
    "\23\11\1\214\11\11\17\0\1\11\6\0\1\11\13\0"+
    "\14\11\1\215\20\11\17\0\1\11\6\0\1\11\13\0"+
    "\35\11\17\0\1\11\1\216\5\0\1\11\13\0\1\11"+
    "\1\217\33\11\17\0\1\11\6\0\1\11\13\0\20\11"+
    "\1\220\14\11\17\0\1\11\6\0\1\11\13\0\1\221"+
    "\34\11\17\0\1\11\6\0\1\11\13\0\35\11\17\0"+
    "\1\11\1\222\5\0\1\11\13\0\1\223\23\11\1\224"+
    "\10\11\17\0\1\11\6\0\1\11\17\0\1\66\72\0"+
    "\35\11\17\0\1\11\1\225\5\0\1\11\17\0\1\226"+
    "\123\0\1\227\1\230\2\227\3\0\2\231\67\0\1\232"+
    "\1\0\1\232\42\0\6\233\23\0\4\233\46\0\1\127"+
    "\24\0\4\133\22\0\1\130\23\0\1\127\24\0\1\133"+
    "\3\134\22\0\1\130\36\0\1\234\116\0\1\136\36\0"+
    "\43\143\1\0\1\235\32\143\1\0\7\11\1\236\25\11"+
    "\17\0\1\11\6\0\1\11\32\0\1\237\61\0\1\240"+
    "\17\0\1\212\1\241\32\0\1\212\20\0\1\242\106\0"+
    "\1\222\44\0\1\222\25\0\1\127\24\0\4\152\41\0"+
    "\61\153\1\0\3\153\1\243\1\155\10\153\61\156\1\0"+
    "\4\156\1\157\1\244\7\156\1\0\21\162\1\245\13\162"+
    "\17\0\1\162\6\0\1\162\13\0\35\162\17\0\1\162"+
    "\6\0\1\162\13\0\13\162\1\246\21\162\17\0\1\162"+
    "\6\0\1\162\13\0\23\162\1\247\11\162\17\0\1\162"+
    "\6\0\1\162\13\0\7\162\1\250\25\162\17\0\1\162"+
    "\6\0\1\162\13\0\4\162\1\251\30\162\17\0\1\162"+
    "\6\0\1\162\13\0\2\162\1\252\2\162\1\253\11\162"+
    "\1\254\1\162\1\255\1\256\12\162\17\0\1\162\1\0"+
    "\1\257\4\0\1\162\36\0\1\260\53\0\1\261\34\11"+
    "\17\0\1\11\6\0\1\11\13\0\22\11\1\262\12\11"+
    "\17\0\1\11\1\0\1\263\4\0\1\11\13\0\23\11"+
    "\1\264\11\11\17\0\1\11\1\0\1\203\4\0\1\11"+
    "\13\0\35\11\17\0\1\11\1\265\5\0\1\11\13\0"+
    "\4\11\1\266\30\11\17\0\1\11\6\0\1\11\17\0"+
    "\1\267\72\0\22\11\1\270\3\11\1\24\6\11\17\0"+
    "\1\11\1\271\1\272\4\0\1\11\13\0\4\11\1\273"+
    "\30\11\17\0\1\11\6\0\1\11\36\0\1\66\53\0"+
    "\22\11\1\224\12\11\17\0\1\11\6\0\1\11\13\0"+
    "\4\11\1\175\30\11\17\0\1\11\6\0\1\11\13\0"+
    "\2\11\1\274\32\11\17\0\1\11\6\0\1\11\17\0"+
    "\1\176\72\0\1\275\76\0\13\11\1\276\21\11\17\0"+
    "\1\11\6\0\1\11\36\0\1\277\57\0\1\203\72\0"+
    "\7\11\1\300\25\11\17\0\1\11\6\0\1\11\13\0"+
    "\4\11\1\301\30\11\17\0\1\11\6\0\1\11\30\0"+
    "\1\203\7\0\1\302\51\0\13\11\1\303\21\11\17\0"+
    "\1\11\6\0\1\11\13\0\24\11\1\304\10\11\17\0"+
    "\1\11\6\0\1\11\13\0\23\11\1\303\11\11\17\0"+
    "\1\11\6\0\1\11\36\0\1\305\53\0\10\11\1\306"+
    "\24\11\17\0\1\11\1\307\5\0\1\11\13\0\4\11"+
    "\1\310\30\11\17\0\1\11\6\0\1\11\26\0\1\124"+
    "\76\0\1\311\62\0\32\312\4\227\23\312\4\0\14\312"+
    "\1\313\25\312\1\314\2\312\3\315\23\312\4\0\12\312"+
    "\32\0\1\227\1\230\2\227\51\0\1\316\131\0\1\317"+
    "\34\0\1\320\34\11\17\0\1\11\6\0\1\11\26\0"+
    "\1\321\76\0\1\322\67\0\1\323\115\0\1\324\53\0"+
    "\6\162\1\325\26\162\17\0\1\162\6\0\1\162\13\0"+
    "\16\162\1\326\16\162\17\0\1\162\6\0\1\162\13\0"+
    "\23\162\1\327\11\162\17\0\1\162\6\0\1\162\13\0"+
    "\17\162\1\330\15\162\17\0\1\162\6\0\1\162\13\0"+
    "\2\162\1\331\32\162\17\0\1\162\6\0\1\162\13\0"+
    "\16\162\1\332\16\162\17\0\1\162\6\0\1\162\13\0"+
    "\10\162\1\333\24\162\17\0\1\162\1\334\5\0\1\162"+
    "\13\0\16\162\1\335\16\162\17\0\1\162\6\0\1\162"+
    "\13\0\4\162\1\336\30\162\17\0\1\162\6\0\1\162"+
    "\13\0\4\162\1\337\30\162\17\0\1\162\6\0\1\162"+
    "\17\0\1\340\113\0\1\341\55\0\35\11\17\0\1\11"+
    "\6\0\1\11\7\0\1\66\3\0\22\11\1\175\12\11"+
    "\17\0\1\11\1\0\1\176\4\0\1\11\35\0\1\176"+
    "\33\0\1\176\20\0\35\11\17\0\1\11\1\342\5\0"+
    "\1\11\30\0\1\124\61\0\35\11\17\0\1\11\1\271"+
    "\5\0\1\11\23\0\1\271\44\0\1\271\21\0\26\11"+
    "\1\122\6\11\17\0\1\11\6\0\1\11\20\0\1\66"+
    "\117\0\1\151\50\0\15\11\1\343\17\11\17\0\1\11"+
    "\6\0\1\11\13\0\23\11\1\344\11\11\17\0\1\11"+
    "\6\0\1\11\26\0\1\345\63\0\4\11\1\346\30\11"+
    "\17\0\1\11\6\0\1\11\13\0\1\347\3\0\1\350"+
    "\72\0\16\11\1\351\16\11\17\0\1\11\6\0\1\11"+
    "\13\0\22\11\1\352\12\11\17\0\1\11\1\0\1\353"+
    "\4\0\1\11\13\0\1\354\76\0\35\11\17\0\1\11"+
    "\1\355\5\0\1\11\13\0\35\11\17\0\1\11\1\356"+
    "\5\0\1\11\15\0\1\357\74\0\23\11\1\175\11\11"+
    "\17\0\1\11\6\0\1\11\36\0\1\176\56\0\1\66"+
    "\124\0\4\312\73\0\1\312\1\360\1\312\1\360\42\0"+
    "\6\361\23\0\4\361\41\0\33\312\3\315\23\312\4\0"+
    "\12\312\20\0\1\140\57\0\13\11\1\362\21\11\17\0"+
    "\1\11\6\0\1\11\17\0\1\363\116\0\1\364\73\0"+
    "\1\365\65\0\1\355\44\0\1\355\21\0\35\162\17\0"+
    "\1\162\1\0\1\366\4\0\1\162\13\0\1\162\1\367"+
    "\33\162\17\0\1\162\6\0\1\162\13\0\17\162\1\370"+
    "\15\162\17\0\1\162\6\0\1\162\13\0\35\162\17\0"+
    "\1\371\6\0\1\162\13\0\16\162\1\372\16\162\17\0"+
    "\1\162\6\0\1\162\13\0\16\162\1\373\16\162\17\0"+
    "\1\162\6\0\1\162\13\0\13\162\1\374\21\162\17\0"+
    "\1\162\6\0\1\162\26\0\1\375\63\0\35\162\17\0"+
    "\1\162\1\0\1\376\4\0\1\162\13\0\20\162\1\377"+
    "\14\162\17\0\1\162\6\0\1\162\13\0\22\162\1\u0100"+
    "\12\162\17\0\1\162\1\0\1\u0101\4\0\1\162\34\0"+
    "\1\u0102\1\u0101\33\0\1\u0101\20\0\1\u0103\113\0\1\u0104"+
    "\61\0\3\11\1\u0105\31\11\17\0\1\11\6\0\1\11"+
    "\13\0\10\11\1\u0106\24\11\17\0\1\11\1\u0107\5\0"+
    "\1\11\26\0\1\u0108\63\0\14\11\1\u0109\20\11\17\0"+
    "\1\11\6\0\1\11\30\0\1\u010a\61\0\1\u010b\76\0"+
    "\3\11\1\175\31\11\17\0\1\11\6\0\1\11\13\0"+
    "\17\11\1\u010c\15\11\17\0\1\11\6\0\1\11\32\0"+
    "\1\u010d\102\0\1\124\55\0\1\66\115\0\1\u010e\64\0"+
    "\1\66\66\0\33\312\1\360\1\312\1\360\23\312\4\0"+
    "\13\312\6\361\23\312\4\361\23\312\4\0\12\312\1\0"+
    "\23\11\1\u010f\11\11\17\0\1\11\6\0\1\11\27\0"+
    "\1\u0110\65\0\1\u010e\100\0\1\u0111\71\0\1\u0112\34\162"+
    "\17\0\1\162\6\0\1\162\13\0\35\162\17\0\1\u0113"+
    "\6\0\1\162\13\0\4\162\1\u0114\30\162\17\0\1\162"+
    "\6\0\1\162\13\0\21\162\1\u0115\13\162\17\0\1\162"+
    "\6\0\1\162\13\0\12\162\1\u0116\22\162\17\0\1\162"+
    "\6\0\1\162\7\0\1\u0117\3\0\4\162\1\u0118\30\162"+
    "\17\0\1\162\6\0\1\162\17\0\1\u0119\115\0\1\u011a"+
    "\53\0\24\162\1\u011b\10\162\17\0\1\162\6\0\1\162"+
    "\13\0\22\162\1\u011c\12\162\17\0\1\162\1\0\1\u011d"+
    "\4\0\1\162\35\0\1\u011d\33\0\1\u011d\45\0\1\u011e"+
    "\53\0\1\203\120\0\1\124\52\0\35\11\17\0\1\11"+
    "\1\0\1\66\4\0\1\11\13\0\16\11\1\u011f\16\11"+
    "\17\0\1\11\6\0\1\11\31\0\1\u0120\110\0\1\66"+
    "\46\0\4\11\1\u0121\30\11\17\0\1\11\6\0\1\11"+
    "\15\0\1\u0122\77\0\1\u0123\73\0\1\u0124\34\11\17\0"+
    "\1\11\6\0\1\11\13\0\1\u0125\102\0\1\u0126\72\0"+
    "\35\11\17\0\1\u0127\6\0\1\11\17\0\1\u0128\72\0"+
    "\1\u0129\76\0\13\162\1\u0118\21\162\17\0\1\162\6\0"+
    "\1\162\13\0\21\162\1\u012a\13\162\17\0\1\162\6\0"+
    "\1\162\13\0\21\162\1\u012b\13\162\17\0\1\162\6\0"+
    "\1\162\13\0\3\162\1\u012c\31\162\17\0\1\162\6\0"+
    "\1\162\13\0\35\162\17\0\1\162\1\u012d\5\0\1\162"+
    "\23\0\1\u012d\44\0\1\u012d\21\0\35\162\17\0\1\162"+
    "\1\0\1\u011a\4\0\1\162\35\0\1\u011a\33\0\1\u011a"+
    "\20\0\4\162\1\335\30\162\17\0\1\162\6\0\1\162"+
    "\13\0\35\162\17\0\1\162\1\u012e\5\0\1\162\23\0"+
    "\1\u012e\44\0\1\u012e\25\0\1\u012f\72\0\15\11\1\175"+
    "\17\11\17\0\1\11\6\0\1\11\30\0\1\176\61\0"+
    "\15\11\1\u0130\17\11\17\0\1\11\6\0\1\11\17\0"+
    "\1\u0123\110\0\1\271\60\0\2\11\1\205\32\11\17\0"+
    "\1\11\6\0\1\11\15\0\1\207\150\0\1\u0131\22\0"+
    "\2\11\1\u0132\32\11\17\0\1\11\6\0\1\11\30\0"+
    "\1\u0133\63\0\1\124\74\0\1\u0134\3\162\1\u0135\30\162"+
    "\17\0\1\162\6\0\1\162\13\0\21\162\1\u0136\13\162"+
    "\17\0\1\162\6\0\1\162\13\0\22\162\1\u0137\12\162"+
    "\17\0\1\162\1\0\1\u0138\4\0\1\162\17\0\1\u011a"+
    "\110\0\1\u0139\101\0\1\u011a\55\0\23\11\1\u0105\11\11"+
    "\17\0\1\11\6\0\1\11\31\0\1\u013a\60\0\16\11"+
    "\1\u013b\16\11\17\0\1\11\6\0\1\11\36\0\1\u013c"+
    "\53\0\26\162\1\u013d\6\162\17\0\1\162\6\0\1\162"+
    "\13\0\22\162\1\u013e\12\162\17\0\1\162\1\0\1\u013f"+
    "\4\0\1\162\13\0\16\162\1\u0140\16\162\17\0\1\162"+
    "\6\0\1\162\13\0\4\162\1\u0141\30\162\17\0\1\162"+
    "\6\0\1\162\17\0\1\u0142\107\0\1\u011a\76\0\1\u0129"+
    "\61\0\14\11\1\u0143\20\11\17\0\1\11\6\0\1\11"+
    "\35\0\1\66\33\0\1\66\20\0\35\162\17\0\1\u0144"+
    "\6\0\1\162\13\0\17\162\1\u0145\15\162\17\0\1\162"+
    "\6\0\1\162\32\0\1\u0146\57\0\21\162\1\u0147\13\162"+
    "\17\0\1\162\6\0\1\162\13\0\23\162\1\u0148\11\162"+
    "\17\0\1\162\6\0\1\162\36\0\1\u0149\53\0\17\11"+
    "\1\u014a\15\11\17\0\1\11\6\0\1\11\13\0\17\162"+
    "\1\u014b\15\162\17\0\1\162\6\0\1\162\13\0\16\162"+
    "\1\u014c\16\162\17\0\1\162\6\0\1\162\31\0\1\u014d"+
    "\60\0\14\162\1\u014e\20\162\17\0\1\162\6\0\1\162"+
    "\13\0\35\162\13\0\1\u014f\3\0\1\162\6\0\1\162"+
    "\63\0\1\u014f\26\0\35\11\17\0\1\11\1\u0150\5\0"+
    "\1\11\13\0\16\162\1\u0151\16\162\17\0\1\162\6\0"+
    "\1\162\13\0\15\162\1\u0152\17\162\17\0\1\162\6\0"+
    "\1\162\30\0\1\u0153\61\0\35\162\17\0\1\162\1\0"+
    "\1\u0154\4\0\1\162\77\0\1\u0155\1\0\1\u0156\23\0"+
    "\1\u0157\63\0\35\162\17\0\1\162\1\0\1\u0158\4\0"+
    "\1\162\13\0\35\162\17\0\1\162\1\0\1\u0159\4\0"+
    "\1\162\35\0\1\u0159\33\0\1\u0159\26\0\1\366\67\0"+
    "\61\u0155\1\0\3\u0155\1\u015a\1\u015b\10\u0155\61\u0156\1\0"+
    "\4\u0156\1\u015c\1\u015a\7\u0156\5\0\1\u015d\115\0\1\u015e"+
    "\57\0\1\u015f\143\0\1\u0160\24\0\61\u0155\1\0\3\u0155"+
    "\1\u0161\1\u015b\10\u0155\61\u0156\1\0\4\u0156\1\u015c\1\u0162"+
    "\7\u0156\22\0\1\66\131\0\1\u0163\76\0\1\u0164\21\0"+
    "\52\u0155\1\u0165\6\u0155\1\0\3\u0155\1\u015a\1\u015b\10\u0155"+
    "\52\u0156\1\u0166\6\u0156\1\0\4\u0156\1\u015c\1\u015a\7\u0156"+
    "\4\0\1\u0167\102\0\1\u0168\67\0\1\u0169\102\0\1\u016a"+
    "\115\0\1\u016b\53\0\1\u016c\76\0\1\366\101\0\1\u016d"+
    "\77\0\1\u016e\113\0\1\366\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20979];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\35\1\5\11\6\1\1\11\1\0\5\1"+
    "\1\11\3\1\1\11\6\1\1\0\6\1\1\0\3\1"+
    "\1\0\1\1\1\0\11\1\1\0\1\1\5\0\2\1"+
    "\1\0\1\11\1\1\3\11\1\0\1\11\1\1\4\0"+
    "\1\1\1\0\1\11\3\0\1\11\7\1\1\0\5\1"+
    "\1\11\1\1\1\0\2\1\1\0\3\1\2\0\1\1"+
    "\2\0\2\1\1\0\3\1\1\0\2\1\2\0\2\1"+
    "\1\0\2\1\2\0\1\1\4\0\14\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\11\1\1\4\0"+
    "\7\1\1\0\3\1\3\0\4\1\2\0\2\1\5\0"+
    "\3\1\3\0\1\11\6\1\2\0\2\1\4\0\2\1"+
    "\2\0\1\1\2\0\1\1\2\0\1\1\2\0\5\1"+
    "\1\0\1\1\1\0\1\11\2\1\2\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\2\1\2\0\3\1\3\0"+
    "\1\1\1\0\1\1\1\0\4\1\3\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\2\0\2\1\15\0\1\11\4\0"+
    "\2\1\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 248) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("ERROR");
            }
          case 27: break;
          case 2: 
            { System.out.println("ID Const");
            }
          case 28: break;
          case 3: 
            { System.out.println("tipo entero");
            }
          case 29: break;
          case 4: 
            { System.out.println("Operando comparacion");
            }
          case 30: break;
          case 5: 
            { System.out.println("estructuras de control");
            }
          case 31: break;
          case 6: 
            { System.out.println("Operando Matematico");
            }
          case 32: break;
          case 7: 
            { System.out.println("coma");
            }
          case 33: break;
          case 8: 
            { System.out.println("Punto y coma");
            }
          case 34: break;
          case 9: 
            { System.out.println("Parentesis");
            }
          case 35: break;
          case 10: 
            { System.out.println("llaves");
            }
          case 36: break;
          case 11: 
            { System.out.println("Corchetes");
            }
          case 37: break;
          case 12: 
            { System.out.println("Operando asignacion");
            }
          case 38: break;
          case 13: 
            { System.out.println("Operando Logico");
            }
          case 39: break;
          case 14: 
            { //ignorar
            }
          case 40: break;
          case 15: 
            { System.out.println("comentario");
            }
          case 41: break;
          case 16: 
            { System.out.println("palabras reservadas");
            }
          case 42: break;
          case 17: 
            { System.out.println("tipo flotante");
            }
          case 43: break;
          case 18: 
            { System.out.println("Inicio_Fin");
            }
          case 44: break;
          case 19: 
            { System.out.println("Operando IncrementoDecremento");
            }
          case 45: break;
          case 20: 
            { System.out.println("Constantes Compi");
            }
          case 46: break;
          case 21: 
            { System.out.println("tipo caadena");
            }
          case 47: break;
          case 22: 
            { System.out.println("ID var");
            }
          case 48: break;
          case 23: 
            { System.out.println("bool");
            }
          case 49: break;
          case 24: 
            { System.out.println("variable reservada");
            }
          case 50: break;
          case 25: 
            { System.out.println("superglobal");
            }
          case 51: break;
          case 26: 
            { System.out.println("recordset");
            }
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
