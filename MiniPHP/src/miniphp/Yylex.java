/* The following code was generated by JFlex 1.6.1 */


package miniphp;
import java.util.LinkedList;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

class Yytoken{
    Yytoken (String token, String tipo, int linea, int columna){
        this.token = new String(token);
        this.tipo = tipo;
        this.linea = linea;
        this.columna = columna;
    } 
    public String token;
    public String tipo;
    public int linea;
    public int columna;

    public String toString() {
        if (tipo == "Error") {
            
           return "Token : "+token+" C.Lexico: "+tipo+" ["+linea + "," +columna + "]" ; 
        }
        return token;
    }
    
}









/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/ASUS/Documents/GitHub/MiniPHP-Luis-Andrino-1198516/MiniPHP/src/miniphp/MiniPHP.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\76\1\62\1\64\1\64\1\63\22\0\1\76\1\54\1\70"+
    "\1\75\1\72\1\0\1\71\1\66\1\47\1\47\1\44\1\41\1\45"+
    "\1\42\1\61\1\43\1\33\1\35\6\34\2\32\1\73\1\46\1\36"+
    "\1\53\1\40\1\37\1\0\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\12"+
    "\1\51\1\67\1\52\1\0\1\56\1\0\1\1\1\2\1\3\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\12\1\50\1\55\1\50\1\0\6\12\1\65\32\12\1\77"+
    "\137\12\60\0\2\57\115\0\1\60\u1500\0\1\76\u097f\0\13\76\35\0"+
    "\1\64\1\64\5\0\1\76\57\0\1\76\312\0\1\74\u0ed5\0\1\76"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\26\2\2\3\1\4\1\5\1\4\4\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\2\2\1\1\17\3\20\4\1\1\5\1\21\3\2"+
    "\2\22\6\2\1\5\1\0\12\2\1\0\5\2\1\0"+
    "\1\2\1\0\3\2\1\15\10\2\1\0\3\2\2\0"+
    "\1\3\4\0\1\23\1\3\1\0\2\4\1\24\1\25"+
    "\1\14\2\0\1\6\1\15\1\26\4\0\1\23\1\0"+
    "\1\27\3\0\7\30\1\2\1\0\12\2\2\26\2\2"+
    "\1\0\5\2\1\0\3\2\1\5\1\2\2\0\5\2"+
    "\1\0\1\2\1\0\4\2\1\0\5\2\1\0\4\2"+
    "\1\0\1\2\1\0\2\23\1\0\2\1\3\0\1\23"+
    "\2\3\2\0\1\2\4\0\14\30\1\0\1\2\1\0"+
    "\5\2\1\0\3\2\1\0\1\5\1\0\5\2\2\0"+
    "\4\2\1\0\4\2\1\0\4\2\1\0\4\2\1\0"+
    "\1\2\1\0\1\31\1\2\1\0\6\23\1\0\1\1"+
    "\1\0\2\3\1\0\1\21\1\2\4\0\10\30\1\0"+
    "\4\30\1\0\1\2\1\0\2\2\1\0\7\2\1\22"+
    "\1\2\1\22\5\2\2\0\2\2\1\0\2\2\1\0"+
    "\1\2\1\0\1\2\1\0\2\2\1\0\6\23\2\1"+
    "\1\0\2\3\1\2\3\0\2\32\6\30\2\0\3\30"+
    "\2\0\1\2\1\0\2\2\1\0\1\22\3\2\2\0"+
    "\5\2\2\0\1\2\1\0\2\2\1\0\2\23\1\0"+
    "\4\1\2\0\2\3\1\0\1\2\2\0\5\30\1\0"+
    "\1\30\1\0\3\30\2\0\2\2\1\0\1\2\1\5"+
    "\3\2\2\0\1\2\1\0\1\2\2\22\2\1\1\0"+
    "\2\3\2\0\2\3\2\0\1\2\2\0\4\30\1\0"+
    "\2\30\2\0\3\2\1\0\1\3\1\1\1\0\1\2"+
    "\1\0\4\30\1\0\1\30\1\0\1\2\1\0\1\2"+
    "\1\0\2\30\1\0\2\30\1\0\1\2\2\30\1\0"+
    "\2\30\1\0\1\2\2\30\1\0\1\30\1\0\1\2"+
    "\1\0\2\30\1\0\1\30\3\0\1\2\1\0\1\30"+
    "\1\0\1\30\5\0\1\30\1\0\1\30\1\0\1\33"+
    "\1\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0"+
    "\0\u0800\0\100\0\100\0\100\0\100\0\100\0\u0840\0\u0840"+
    "\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\100\0\u09c0\0\u0240"+
    "\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\100\0\u0b00\0\u0b40\0\u0b80"+
    "\0\u0bc0\0\u0240\0\100\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0240\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0"+
    "\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0"+
    "\0\u1300\0\u0240\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680"+
    "\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880"+
    "\0\100\0\u18c0\0\100\0\100\0\100\0\u0980\0\u1900\0\100"+
    "\0\100\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u0a00"+
    "\0\100\0\u1ac0\0\u0a40\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00"+
    "\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00"+
    "\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u0240"+
    "\0\100\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180"+
    "\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380"+
    "\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580"+
    "\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780"+
    "\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980"+
    "\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80"+
    "\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80"+
    "\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80"+
    "\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180"+
    "\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380"+
    "\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580"+
    "\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780"+
    "\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980"+
    "\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80"+
    "\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u0240\0\u3d00\0\u3d40"+
    "\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\u3f40"+
    "\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\100\0\u4080\0\u40c0\0\u4100"+
    "\0\u4140\0\u4180\0\u41c0\0\u4200\0\u4240\0\u4280\0\u42c0\0\u4300"+
    "\0\u4340\0\u4380\0\u43c0\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500"+
    "\0\u4540\0\u4580\0\u45c0\0\u4600\0\u4640\0\u4680\0\u46c0\0\u4700"+
    "\0\u4740\0\u4780\0\u47c0\0\u4800\0\u4840\0\u4880\0\u48c0\0\u4900"+
    "\0\u4940\0\u4980\0\u49c0\0\u4a00\0\u4a40\0\u4a80\0\u4ac0\0\u4b00"+
    "\0\u4b40\0\u4b80\0\u4bc0\0\u4c00\0\u4c40\0\u4c80\0\u4cc0\0\u4d00"+
    "\0\u4d40\0\u4d80\0\u4dc0\0\u4e00\0\u4e40\0\u4e80\0\u4ec0\0\u4f00"+
    "\0\u4f40\0\u4f80\0\u4fc0\0\u5000\0\u5040\0\u5080\0\u50c0\0\u5100"+
    "\0\u5140\0\u5180\0\u1b80\0\100\0\u51c0\0\u5200\0\u5240\0\u5280"+
    "\0\u52c0\0\u5300\0\u5340\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480"+
    "\0\u54c0\0\u5500\0\u5540\0\u5580\0\u55c0\0\u5600\0\u5640\0\u5680"+
    "\0\u56c0\0\u5700\0\u5740\0\u5780\0\u57c0\0\u5800\0\u5840\0\u5880"+
    "\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40\0\u5a80"+
    "\0\u5ac0\0\u5b00\0\u5b40\0\u5b80\0\u5bc0\0\u5c00\0\u5c40\0\u5c80"+
    "\0\u5cc0\0\u5d00\0\u5d40\0\u5d80\0\u5dc0\0\u5e00\0\u5e40\0\u5e80"+
    "\0\u5ec0\0\u5f00\0\u5f40\0\u5f80\0\u5fc0\0\u6000\0\u6040\0\u6080"+
    "\0\u60c0\0\u6100\0\u6140\0\u6180\0\u61c0\0\u6200\0\u6240\0\u6280"+
    "\0\u62c0\0\u6300\0\u6340\0\u6380\0\u63c0\0\u6400\0\u6440\0\u6480"+
    "\0\u64c0\0\u62c0\0\u6500\0\u6540\0\u6580\0\u65c0\0\u6600\0\u6640"+
    "\0\u6680\0\u66c0\0\u6700\0\u6740\0\u6780\0\u67c0\0\u6800\0\u6840"+
    "\0\u6880\0\u68c0\0\u6900\0\u6940\0\u6980\0\u69c0\0\u6a00\0\u6a40"+
    "\0\u6a80\0\u6ac0\0\u6b00\0\u6b40\0\u6b80\0\u6bc0\0\u6c00\0\u6c40"+
    "\0\u6c80\0\u6cc0\0\u6d00\0\u6d40\0\u6d80\0\u6dc0\0\u6e00\0\u6e40"+
    "\0\u6e80\0\u6ec0\0\u6f00\0\u6f40\0\u6f80\0\u6fc0\0\u7000\0\u7040"+
    "\0\u7080\0\u70c0\0\u7100\0\u7140\0\u7180\0\u71c0\0\u7200\0\u7240"+
    "\0\u7280\0\u72c0\0\u7300\0\u7340\0\u7380\0\u73c0\0\u7400\0\u7440"+
    "\0\u7480\0\u74c0\0\u7500\0\u7540\0\u7580\0\u75c0\0\u7600\0\u7640"+
    "\0\u7680\0\u76c0\0\u7700\0\u7740\0\u7780\0\u77c0\0\u7800\0\u7840"+
    "\0\u7880\0\u78c0\0\u7900\0\u7940\0\u7980\0\u79c0\0\u7a00\0\u7a40"+
    "\0\100\0\u7a80\0\u7ac0\0\u7b00\0\u7b40\0\u7b80\0\u7bc0\0\u7c00"+
    "\0\u7c40\0\u7c80\0\u7cc0\0\u7d00\0\u7d40\0\u7d80\0\u7dc0\0\u7e00"+
    "\0\u7e40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\12\1\14\1\15\1\16\1\17\1\20"+
    "\1\12\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\31\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\2\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\56\1\60\1\61\1\2\1\62\1\63\1\64"+
    "\1\65\1\2\1\66\1\56\1\60\101\0\1\12\1\67"+
    "\13\12\1\70\3\12\1\71\1\72\12\12\20\0\1\12"+
    "\1\0\1\73\4\0\1\12\11\0\1\12\1\0\21\12"+
    "\1\74\13\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\1\0\1\75\12\12\1\76\2\12\1\77\16\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\4\12\1\100"+
    "\3\12\1\101\5\12\1\102\16\12\20\0\1\12\1\103"+
    "\5\0\1\12\11\0\1\12\1\0\2\12\1\104\10\12"+
    "\1\105\1\106\1\107\7\12\1\110\1\12\1\111\5\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\1\112"+
    "\7\12\1\113\5\12\1\114\5\12\1\115\10\12\20\0"+
    "\1\12\1\116\5\0\1\12\11\0\1\12\1\0\13\12"+
    "\1\117\2\12\1\120\16\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\35\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\5\12\1\102\6\12\1\121\1\122"+
    "\4\12\1\123\12\12\20\0\1\12\1\0\1\124\4\0"+
    "\1\12\11\0\1\12\1\0\10\12\1\125\24\12\20\0"+
    "\1\12\1\126\5\0\1\12\11\0\1\12\1\0\4\12"+
    "\1\127\30\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\1\0\1\130\3\12\1\131\30\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\21\12\1\132\13\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\21\12\1\133"+
    "\2\12\1\134\10\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\4\12\1\135\30\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\23\12\1\136\2\12\1\137"+
    "\6\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\7\12\1\140\11\12\1\141\13\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\15\12\1\123\4\12\1\142"+
    "\12\12\20\0\1\12\1\0\1\143\4\0\1\12\11\0"+
    "\1\12\1\0\1\144\34\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\7\12\1\145\25\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\16\12\1\17\16\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\10\12"+
    "\1\146\24\12\20\0\1\12\1\147\5\0\1\12\11\0"+
    "\1\12\5\0\1\150\24\0\4\151\3\0\2\152\16\0"+
    "\1\153\20\0\1\154\2\0\1\150\22\0\1\155\1\0"+
    "\1\156\3\157\3\0\2\152\16\0\1\153\55\0\1\160"+
    "\1\161\12\0\1\162\63\0\1\161\1\163\112\0\1\161"+
    "\56\0\1\31\1\32\2\31\3\0\1\164\11\0\1\165"+
    "\5\0\1\166\50\0\1\31\1\32\2\31\4\0\1\164"+
    "\10\0\1\165\5\0\1\166\61\0\1\66\1\167\6\0"+
    "\1\165\70\0\1\170\6\0\1\165\77\0\1\35\101\0"+
    "\1\171\23\0\35\12\20\0\1\172\6\0\1\12\11\0"+
    "\1\12\6\0\1\73\6\0\1\173\1\174\4\0\1\124"+
    "\34\0\1\124\43\0\1\175\2\0\1\176\102\0\4\177"+
    "\124\0\1\56\15\0\62\200\1\0\3\200\1\201\1\202"+
    "\10\200\62\203\1\0\4\203\1\204\1\201\7\203\71\0"+
    "\1\171\7\0\1\205\5\206\1\207\1\210\7\206\1\211"+
    "\1\206\1\212\7\206\24\0\1\213\6\0\1\206\11\0"+
    "\1\206\62\66\4\0\12\66\1\0\22\12\1\214\12\12"+
    "\20\0\1\12\1\0\1\215\4\0\1\12\11\0\1\12"+
    "\1\0\3\12\1\132\31\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\21\12\1\216\13\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\4\12\1\217\30\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\13\12"+
    "\1\220\6\12\1\221\1\222\11\12\20\0\1\12\1\0"+
    "\1\143\4\0\1\12\11\0\1\12\1\0\1\223\15\12"+
    "\1\224\16\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\1\0\15\12\1\225\17\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\2\12\1\226\2\12\1\227\27\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\4\12"+
    "\1\72\14\12\1\230\13\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\1\73\14\0\1\231\56\0\7\12"+
    "\1\232\25\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\1\0\22\12\1\233\12\12\20\0\1\12\1\0\1\234"+
    "\4\0\1\12\11\0\1\12\1\0\17\12\1\235\15\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\3\12"+
    "\1\236\31\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\1\0\1\237\34\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\10\12\1\240\12\12\1\241\11\12\20\0"+
    "\1\12\1\242\5\0\1\12\11\0\1\12\1\0\13\12"+
    "\1\243\21\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\1\0\13\12\1\244\1\12\1\245\17\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\21\12\1\246\13\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\15\12"+
    "\1\247\17\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\14\0\1\250\1\0\1\251\62\0\16\12\1\252\16\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\23\12"+
    "\1\232\11\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\1\0\17\12\1\253\15\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\2\12\1\254\17\12\1\255\1\256"+
    "\11\12\20\0\1\12\1\0\1\257\4\0\1\12\11\0"+
    "\1\12\1\0\22\12\1\260\12\12\20\0\1\12\1\0"+
    "\1\261\4\0\1\12\11\0\1\12\23\0\1\261\34\0"+
    "\1\261\20\0\15\12\1\244\4\12\1\240\12\12\20\0"+
    "\1\12\1\0\1\242\4\0\1\12\11\0\1\12\16\0"+
    "\1\250\4\0\1\242\34\0\1\242\20\0\23\12\1\262"+
    "\11\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\14\12\1\263\20\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\26\12\1\72\6\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\10\12\1\264\5\12\1\265"+
    "\16\12\20\0\1\12\1\266\5\0\1\12\11\0\1\12"+
    "\1\0\1\12\1\267\33\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\20\12\1\270\2\12\1\271\11\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\1\272"+
    "\34\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\10\12\1\273\24\12\20\0\1\12\1\274\5\0\1\12"+
    "\11\0\1\12\1\0\21\12\1\275\13\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\1\276\23\12\1\277"+
    "\3\12\1\72\4\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\4\12\1\72\30\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\1\73\73\0\21\12\1\72"+
    "\13\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\10\12\1\300\24\12\20\0\1\12\1\301\5\0\1\12"+
    "\11\0\1\12\1\0\4\12\1\302\30\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\5\0\1\303\124\0\1\304"+
    "\1\305\2\304\3\0\2\306\36\0\4\307\1\310\24\307"+
    "\4\151\3\0\2\152\13\0\1\307\2\0\1\153\3\0"+
    "\1\307\4\0\1\311\4\0\1\307\32\0\4\312\23\0"+
    "\1\313\50\0\4\314\75\0\1\315\1\0\1\315\43\0"+
    "\6\316\23\0\4\316\43\0\4\307\1\310\24\307\4\156"+
    "\20\0\1\307\2\0\1\153\3\0\1\307\4\0\1\311"+
    "\4\0\1\307\1\0\4\307\1\310\24\307\1\156\3\157"+
    "\3\0\2\152\13\0\1\307\2\0\1\153\3\0\1\307"+
    "\4\0\1\311\4\0\1\307\20\0\1\317\117\0\1\161"+
    "\37\0\44\167\1\320\33\167\1\0\7\12\1\321\25\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\20\0\1\322"+
    "\62\0\1\323\17\0\1\257\1\324\33\0\1\257\20\0"+
    "\1\325\107\0\1\274\45\0\1\274\25\0\1\150\24\0"+
    "\4\177\42\0\62\200\4\0\12\200\62\203\4\0\12\203"+
    "\1\0\21\206\1\326\13\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\1\0\35\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\1\0\13\206\1\327\21\206\20\0\1\206"+
    "\6\0\1\206\11\0\1\206\1\0\23\206\1\330\11\206"+
    "\20\0\1\206\6\0\1\206\11\0\1\206\1\0\7\206"+
    "\1\331\25\206\20\0\1\206\6\0\1\206\11\0\1\206"+
    "\1\0\4\206\1\332\30\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\1\0\2\206\1\333\1\206\1\334\1\335"+
    "\1\336\10\206\1\337\1\206\1\340\1\341\12\206\20\0"+
    "\1\206\1\0\1\342\4\0\1\206\11\0\1\206\1\0"+
    "\23\12\1\343\11\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\24\0\1\344\54\0\1\345\34\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\1\346\34\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\13\12\1\347"+
    "\21\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\4\12\1\102\30\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\2\12\1\350\32\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\22\12\1\351\12\12\20\0"+
    "\1\12\1\0\1\352\4\0\1\12\11\0\1\12\1\0"+
    "\15\12\1\142\17\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\22\12\1\240\1\353\11\12\20\0\1\12"+
    "\1\0\1\242\4\0\1\12\11\0\1\12\1\0\13\12"+
    "\1\354\21\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\1\0\1\355\7\12\1\224\24\12\20\0\1\12\1\356"+
    "\5\0\1\12\11\0\1\12\1\0\16\12\1\72\16\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\4\12"+
    "\1\357\30\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\1\360\73\0\23\12\1\345\11\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\3\12\1\361\1\12"+
    "\1\362\2\12\1\363\11\12\1\364\3\12\1\365\6\12"+
    "\20\0\1\12\1\366\1\367\4\0\1\12\11\0\1\12"+
    "\1\0\13\12\1\72\21\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\23\12\1\72\11\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\4\12\1\370\30\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\24\0\1\73"+
    "\54\0\22\12\1\277\12\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\4\12\1\230\30\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\1\371\34\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\4\12\1\372"+
    "\30\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\2\12\1\373\32\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\5\0\1\231\73\0\1\374\77\0\1\12\1\110"+
    "\33\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\13\12\1\375\21\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\13\12\1\376\21\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\23\12\1\377\11\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\4\12\1\u0100"+
    "\30\12\20\0\1\12\6\0\1\12\11\0\1\12\24\0"+
    "\1\u0101\54\0\4\12\1\240\30\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\1\242\73\0\7\12\1\u0102"+
    "\25\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\4\12\1\u0103\30\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\15\12\1\240\7\12\1\u0104\7\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\23\12\1\u0105"+
    "\11\12\20\0\1\12\6\0\1\12\11\0\1\12\16\0"+
    "\1\242\7\0\1\u0106\52\0\13\12\1\u0107\21\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\24\12\1\u0108"+
    "\10\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\24\12\1\u0109\10\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\23\12\1\u0107\11\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\23\12\1\u010a\11\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\24\0\1\u010b\54\0"+
    "\16\12\1\131\16\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\10\12\1\u010c\24\12\20\0\1\12\1\u010d"+
    "\5\0\1\12\11\0\1\12\1\0\4\12\1\u010e\30\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\13\12"+
    "\1\221\21\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\14\0\1\143\64\0\13\12\1\u010f\21\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\14\0\1\u0110\63\0\32\u0111"+
    "\4\304\24\u0111\4\0\14\u0111\1\u0112\25\u0111\1\u0113\2\u0111"+
    "\3\u0114\24\u0111\4\0\12\u0111\32\0\1\304\1\305\2\304"+
    "\43\0\35\307\20\0\1\307\6\0\1\307\11\0\1\307"+
    "\1\0\31\307\1\u0115\1\u0116\2\u0115\3\0\2\u0117\13\0"+
    "\1\307\6\0\1\307\11\0\1\307\1\0\31\307\24\0"+
    "\1\307\6\0\1\307\11\0\1\307\1\0\4\307\1\u0118"+
    "\24\307\4\312\20\0\1\307\2\0\1\313\3\0\1\307"+
    "\4\0\1\311\4\0\1\307\32\0\4\u0119\43\0\4\307"+
    "\1\310\24\307\4\314\20\0\1\307\6\0\1\307\4\0"+
    "\1\311\4\0\1\307\32\0\1\312\1\u011a\1\312\1\u011a"+
    "\3\0\2\152\16\0\1\313\17\0\6\316\23\0\4\u011b"+
    "\3\0\2\152\16\0\1\313\26\0\1\u011c\67\0\43\167"+
    "\1\u011d\1\320\33\167\1\0\1\u011e\34\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\14\0\1\u011f\77\0\1\u0120"+
    "\70\0\1\u0121\116\0\1\u0122\54\0\6\206\1\u0123\26\206"+
    "\20\0\1\206\6\0\1\206\11\0\1\206\1\0\16\206"+
    "\1\u0124\16\206\20\0\1\206\6\0\1\206\11\0\1\206"+
    "\1\0\23\206\1\u0125\11\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\1\0\17\206\1\u0126\15\206\20\0\1\206"+
    "\6\0\1\206\11\0\1\206\1\0\2\206\1\u0127\32\206"+
    "\20\0\1\206\6\0\1\206\11\0\1\206\1\0\16\206"+
    "\1\u0128\16\206\20\0\1\206\6\0\1\206\11\0\1\206"+
    "\1\0\15\206\1\u0129\17\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\1\0\10\206\1\u012a\24\206\20\0\1\206"+
    "\1\u012b\5\0\1\206\11\0\1\206\1\0\4\206\1\u012c"+
    "\30\206\20\0\1\206\6\0\1\206\11\0\1\206\1\0"+
    "\16\206\1\u012d\16\206\20\0\1\206\6\0\1\206\11\0"+
    "\1\206\1\0\4\206\1\u012e\30\206\20\0\1\206\6\0"+
    "\1\206\11\0\1\206\1\0\4\206\1\u012f\30\206\20\0"+
    "\1\206\6\0\1\206\11\0\1\206\5\0\1\u0130\73\0"+
    "\21\12\1\u0131\13\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\22\0\1\u0132\56\0\30\12\1\72\4\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\12\12\1\102"+
    "\22\12\20\0\1\12\6\0\1\12\6\0\1\73\2\0"+
    "\1\12\1\0\1\u0133\34\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\7\12\1\72\25\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\22\12\1\230\12\12"+
    "\20\0\1\12\1\0\1\231\4\0\1\12\11\0\1\12"+
    "\23\0\1\231\34\0\1\231\20\0\10\12\1\u0134\24\12"+
    "\20\0\1\12\1\u0135\5\0\1\12\11\0\1\12\1\0"+
    "\1\u0136\34\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\1\0\24\12\1\u0137\10\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\16\0\1\143\62\0\10\12\1\363\24\12"+
    "\20\0\1\12\1\366\5\0\1\12\11\0\1\12\11\0"+
    "\1\366\45\0\1\366\21\0\4\12\1\u0138\30\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\16\12\1\u0139"+
    "\16\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\5\12\1\102\27\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\26\12\1\u013a\6\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\7\12\1\u013b\25\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\6\0\1\73\120\0"+
    "\1\176\51\0\15\12\1\u013c\17\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\13\12\1\u013d\21\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\1\u010a\34\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\23\12"+
    "\1\u013e\11\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\14\0\1\u013f\64\0\4\12\1\u0140\30\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\24\12\1\u0141\10\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\1\u0142"+
    "\3\12\1\u0143\30\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\21\12\1\u0144\13\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\1\u0145\3\0\1\u0146\73\0"+
    "\16\12\1\u0147\16\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\22\12\1\u0148\12\12\20\0\1\12\1\0"+
    "\1\u0149\4\0\1\12\11\0\1\12\1\0\1\u014a\34\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\4\12"+
    "\1\u014b\30\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\1\0\1\u014c\77\0\10\12\1\u014d\24\12\20\0\1\12"+
    "\1\u014e\5\0\1\12\11\0\1\12\1\0\10\12\1\u014f"+
    "\24\12\20\0\1\12\1\u0150\5\0\1\12\11\0\1\12"+
    "\1\0\21\12\1\u0151\13\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\2\12\1\u0152\32\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\3\0\1\u0153\75\0\23\12"+
    "\1\230\11\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\24\0\1\231\54\0\3\12\1\72\31\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\4\0\1\73\125\0\4\u0111"+
    "\74\0\1\u0111\1\u0154\1\u0111\1\u0154\43\0\6\u0155\23\0"+
    "\4\u0155\42\0\33\u0111\3\u0114\24\u0111\4\0\12\u0111\32\u0156"+
    "\4\u0115\24\u0156\3\0\1\307\14\u0156\1\u0157\25\u0156\1\u0158"+
    "\2\u0156\3\u0159\24\u0156\3\0\1\307\12\u0156\32\0\1\u0115"+
    "\1\u0116\2\u0115\43\0\31\307\1\u015a\1\u015b\2\u015a\3\0"+
    "\2\u015c\13\0\1\307\6\0\1\307\11\0\1\307\1\0"+
    "\4\307\1\u0118\24\307\4\u0119\20\0\1\307\6\0\1\307"+
    "\4\0\1\311\4\0\1\307\1\0\4\307\1\u0118\24\307"+
    "\1\312\1\u011a\1\312\1\u011a\3\0\2\152\13\0\1\307"+
    "\2\0\1\313\3\0\1\307\4\0\1\311\4\0\1\307"+
    "\1\0\4\u015d\1\u015e\1\u015d\23\307\4\u011b\3\0\2\152"+
    "\13\0\1\307\2\0\1\313\3\0\1\307\4\0\1\311"+
    "\4\0\1\307\20\0\1\163\60\0\13\12\1\u015f\21\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\5\0\1\u0160"+
    "\117\0\1\u0161\74\0\1\u0162\66\0\1\u014e\45\0\1\u014e"+
    "\21\0\2\206\1\u0163\17\206\1\u0163\2\206\1\u0163\7\206"+
    "\20\0\1\206\1\0\1\u0164\4\0\1\206\11\0\1\206"+
    "\1\0\1\206\1\u0165\33\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\1\0\17\206\1\u0166\15\206\20\0\1\206"+
    "\6\0\1\206\11\0\1\206\1\0\35\206\20\0\1\u0167"+
    "\6\0\1\206\11\0\1\206\1\0\16\206\1\u0168\16\206"+
    "\20\0\1\206\6\0\1\206\11\0\1\206\1\0\16\206"+
    "\1\u0169\16\206\20\0\1\206\6\0\1\206\11\0\1\206"+
    "\1\0\25\206\1\u0163\7\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\1\0\13\206\1\u016a\21\206\20\0\1\206"+
    "\6\0\1\206\11\0\1\206\14\0\1\u016b\64\0\23\206"+
    "\1\u0163\11\206\20\0\1\206\6\0\1\206\11\0\1\206"+
    "\1\0\22\206\1\u012c\12\206\20\0\1\206\1\0\1\u016c"+
    "\4\0\1\206\11\0\1\206\1\0\20\206\1\u016d\14\206"+
    "\20\0\1\206\6\0\1\206\11\0\1\206\1\0\21\206"+
    "\1\u016e\1\u016f\12\206\20\0\1\206\1\0\1\u0170\4\0"+
    "\1\206\11\0\1\206\22\0\1\u0171\1\u0170\34\0\1\u0170"+
    "\20\0\1\u0172\34\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\1\u0173\77\0\1\12\1\u0174\33\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\15\12\1\u0175"+
    "\17\12\20\0\1\12\6\0\1\12\11\0\1\12\16\0"+
    "\1\u0176\62\0\21\12\1\142\13\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\13\12\1\240\21\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\2\12\1\226"+
    "\32\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\21\12\1\u0177\13\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\10\12\1\u0178\24\12\20\0\1\12\1\274"+
    "\5\0\1\12\11\0\1\12\1\0\10\12\1\u0174\24\12"+
    "\20\0\1\12\1\301\5\0\1\12\11\0\1\12\1\0"+
    "\3\12\1\u0179\31\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\13\12\1\345\21\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\10\12\1\u017a\24\12\20\0"+
    "\1\12\1\u017b\5\0\1\12\11\0\1\12\14\0\1\u017c"+
    "\64\0\14\12\1\u017d\20\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\3\12\1\u017e\31\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\15\12\1\u017f\17\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\1\u0180"+
    "\34\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\5\12\1\u0181\27\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\16\0\1\u0182\62\0\1\u0183\77\0\3\12\1\230"+
    "\31\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\17\12\1\u0184\15\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\20\0\1\u0185\60\0\23\12\1\142\11\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\2\12\1\u0186"+
    "\32\12\20\0\1\12\6\0\1\12\11\0\1\12\24\0"+
    "\1\143\54\0\2\12\1\72\32\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\3\0\1\73\75\0\21\12\1\u0187"+
    "\13\12\20\0\1\12\6\0\1\12\11\0\1\12\22\0"+
    "\1\u0188\56\0\15\12\1\102\17\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\7\12\1\102\25\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\10\0\1\73\67\0"+
    "\33\u0111\1\u0154\1\u0111\1\u0154\24\u0111\4\0\13\u0111\6\u0155"+
    "\23\u0111\4\u0155\24\u0111\4\0\12\u0111\1\0\31\307\4\u0156"+
    "\20\0\1\307\6\0\1\307\4\0\1\311\4\0\1\307"+
    "\1\0\31\307\1\u0156\1\u0189\1\u0156\1\u0189\20\0\1\307"+
    "\6\0\1\307\4\0\1\311\4\0\1\307\1\0\6\u018a"+
    "\23\307\4\u018a\20\0\1\307\6\0\1\307\4\0\1\311"+
    "\4\0\1\307\33\u0156\3\u0159\24\u0156\3\0\1\307\12\u0156"+
    "\1\u018b\31\u018c\4\u015a\20\u018b\1\u018c\3\u018b\3\0\1\307"+
    "\11\u018b\1\u018c\1\u018b\1\u018c\1\u018d\25\u018c\1\u018e\2\u018c"+
    "\3\u018f\20\u018b\1\u018c\3\u018b\3\0\1\307\11\u018b\1\u018c"+
    "\32\0\1\u0190\1\u0191\2\u0190\43\0\6\u015d\23\307\4\u011b"+
    "\3\0\2\152\13\0\1\307\2\0\1\313\3\0\1\307"+
    "\11\0\1\307\1\0\6\u015d\23\307\1\u0192\1\u0193\2\u0192"+
    "\3\0\2\u0194\13\0\1\307\2\0\1\313\3\0\1\307"+
    "\11\0\1\307\1\0\23\12\1\u0195\11\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\15\0\1\u0196\66\0\1\u0188"+
    "\101\0\1\u0197\72\0\1\u0198\34\206\20\0\1\206\6\0"+
    "\1\206\11\0\1\206\1\0\35\206\20\0\1\u0199\6\0"+
    "\1\206\11\0\1\206\1\0\4\206\1\u019a\30\206\20\0"+
    "\1\206\6\0\1\206\11\0\1\206\1\0\21\206\1\u019b"+
    "\13\206\20\0\1\206\6\0\1\206\11\0\1\206\1\0"+
    "\12\206\1\u019c\22\206\20\0\1\206\6\0\1\206\6\0"+
    "\1\u019d\2\0\1\206\1\0\4\206\1\u019e\30\206\20\0"+
    "\1\206\6\0\1\206\11\0\1\206\5\0\1\u019f\116\0"+
    "\1\u0164\54\0\24\206\1\u01a0\10\206\20\0\1\206\6\0"+
    "\1\206\11\0\1\206\1\0\25\206\1\u01a1\7\206\20\0"+
    "\1\206\6\0\1\206\11\0\1\206\1\0\22\206\1\u01a2"+
    "\12\206\20\0\1\206\1\0\1\u01a3\4\0\1\206\11\0"+
    "\1\206\23\0\1\u01a3\34\0\1\u01a3\45\0\1\u01a4\52\0"+
    "\2\12\1\240\32\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\3\0\1\242\75\0\13\12\1\142\21\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\24\12\1\221"+
    "\10\12\20\0\1\12\6\0\1\12\11\0\1\12\25\0"+
    "\1\143\53\0\4\12\1\u01a5\30\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\23\12\1\222\11\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\22\12\1\72"+
    "\12\12\20\0\1\12\1\0\1\73\4\0\1\12\11\0"+
    "\1\12\1\0\16\12\1\u01a6\16\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\17\0\1\u01a7\111\0\1\73\47\0"+
    "\4\12\1\u01a8\30\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\4\12\1\u01a9\30\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\2\12\1\u01aa\32\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\3\12\1\u01ab"+
    "\31\12\20\0\1\12\6\0\1\12\11\0\1\12\1\0"+
    "\1\u01ac\34\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\3\0\1\u01ad\100\0\1\u01ae\74\0\1\u01af\34\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\1\0\1\u01b0\77\0"+
    "\23\12\1\u01b1\11\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\4\12\1\u01b2\30\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\5\0\1\u01b3\72\0\33\u0156\1\u0189"+
    "\1\u0156\1\u0189\24\u0156\3\0\1\307\13\u0156\6\u018a\23\u0156"+
    "\4\u018a\24\u0156\3\0\1\307\12\u0156\1\0\31\307\4\u018b"+
    "\20\0\1\307\6\0\1\307\4\0\1\311\4\0\1\307"+
    "\1\0\31\307\4\u018c\20\0\1\307\6\0\1\307\4\0"+
    "\1\311\4\0\1\307\1\0\31\307\1\u018c\1\u01b4\1\u018c"+
    "\1\u01b4\20\0\1\307\6\0\1\307\4\0\1\311\4\0"+
    "\1\307\1\0\6\u01b5\23\307\4\u01b5\20\0\1\307\6\0"+
    "\1\307\4\0\1\311\4\0\1\307\1\u018b\32\u018c\3\u018f"+
    "\20\u018b\1\u018c\3\u018b\3\0\1\307\11\u018b\1\u018c\1\u018b"+
    "\31\u018c\4\u0190\20\u018b\1\u018c\3\u018b\3\0\1\307\11\u018b"+
    "\1\u018c\1\u018b\1\u018c\1\u018d\25\u018c\1\u018e\1\u018c\1\u018b"+
    "\3\u01b6\20\u018b\1\u018c\3\u018b\3\0\1\307\11\u018b\1\u018c"+
    "\1\u018b\4\u01b7\1\u01b8\1\u01b7\23\u018c\4\u0192\3\u018b\2\u01b9"+
    "\13\u018b\1\u018c\2\u018b\1\u01ba\3\0\1\307\11\u018b\1\u018c"+
    "\1\u018b\1\u01b7\1\u01bb\2\u01b7\1\u01b8\1\u01b7\21\u018c\1\u018e"+
    "\1\u018c\1\u011b\3\u01bc\3\u018b\2\u01b9\13\u018b\1\u018c\2\u018b"+
    "\1\u01ba\3\0\1\307\11\u018b\1\u018c\32\0\1\u01bd\1\u01be"+
    "\2\u01bd\23\0\1\313\17\0\35\12\20\0\1\u01bf\6\0"+
    "\1\12\11\0\1\12\5\0\1\u01c0\73\0\1\u01c1\77\0"+
    "\13\206\1\u019e\21\206\20\0\1\206\6\0\1\206\11\0"+
    "\1\206\1\0\21\206\1\u01c2\13\206\20\0\1\206\6\0"+
    "\1\206\11\0\1\206\1\0\21\206\1\u01c3\13\206\20\0"+
    "\1\206\6\0\1\206\11\0\1\206\1\0\3\206\1\u01c4"+
    "\31\206\20\0\1\206\6\0\1\206\11\0\1\206\1\0"+
    "\10\206\1\u01c5\24\206\20\0\1\206\1\u01c6\5\0\1\206"+
    "\11\0\1\206\11\0\1\u01c6\45\0\1\u01c6\21\0\22\206"+
    "\1\u0163\12\206\20\0\1\206\1\0\1\u0164\4\0\1\206"+
    "\11\0\1\206\23\0\1\u0164\34\0\1\u0164\20\0\4\206"+
    "\1\u012d\30\206\20\0\1\206\6\0\1\206\11\0\1\206"+
    "\1\0\4\206\1\u01c7\30\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\1\0\10\206\1\u01c8\24\206\20\0\1\206"+
    "\1\u01c9\5\0\1\206\11\0\1\206\11\0\1\u01c9\45\0"+
    "\1\u01c9\25\0\1\u01ca\73\0\1\222\34\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\15\12\1\230\17\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\16\0\1\231"+
    "\62\0\15\12\1\u01cb\17\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\35\12\20\0\1\u01cc\6\0\1\12"+
    "\11\0\1\12\1\0\4\12\1\u01ab\30\12\20\0\1\12"+
    "\6\0\1\12\11\0\1\12\1\0\16\12\1\u01cd\16\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\1\0\2\12"+
    "\1\142\32\12\20\0\1\12\6\0\1\12\11\0\1\12"+
    "\5\0\1\u01ae\111\0\1\366\61\0\2\12\1\244\32\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\3\0\1\250"+
    "\75\0\4\12\1\u010f\30\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\56\0\1\u01ce\21\0\1\u018b\32\u018c\1\u01b4"+
    "\1\u018c\1\u01b4\20\u018b\1\u018c\3\u018b\3\0\1\307\11\u018b"+
    "\1\u018c\1\u018b\6\u01b5\23\u018c\4\u01b5\20\u018b\1\u018c\3\u018b"+
    "\3\0\1\307\11\u018b\1\u018c\1\u018b\31\u018c\1\u018b\3\u01b6"+
    "\20\u018b\1\u018c\3\u018b\3\0\1\307\11\u018b\1\u018c\1\0"+
    "\6\u015d\23\307\4\u011b\3\0\2\152\13\0\1\307\2\0"+
    "\1\313\3\0\1\307\4\0\1\311\4\0\1\307\1\0"+
    "\6\u015d\23\307\1\u0192\1\u0193\2\u0192\3\0\2\u0194\13\0"+
    "\1\307\2\0\1\313\3\0\1\307\4\0\1\311\4\0"+
    "\1\307\1\0\31\307\4\312\20\0\1\307\2\0\1\313"+
    "\3\0\1\307\4\0\1\311\4\0\1\307\1\0\31\307"+
    "\4\u0119\20\0\1\307\6\0\1\307\4\0\1\311\4\0"+
    "\1\307\1\0\6\u015d\23\307\1\u011b\1\u01cf\1\u011b\1\u01cf"+
    "\3\0\2\152\13\0\1\307\2\0\1\313\3\0\1\307"+
    "\4\0\1\311\4\0\1\307\1\u018b\4\u01b7\1\u01b8\1\u01b7"+
    "\23\u018c\1\u011b\3\u01bc\3\u018b\2\u01b9\13\u018b\1\u018c\2\u018b"+
    "\1\u01ba\3\0\1\307\11\u018b\1\u018c\1\u018b\4\u018c\1\u01d0"+
    "\24\u018c\4\u01bd\20\u018b\1\u018c\2\u018b\1\u01ba\3\0\1\307"+
    "\11\u018b\1\u018c\1\u018b\1\u018c\1\u018d\2\u018c\1\u01d0\22\u018c"+
    "\1\u018e\1\u018c\1\312\3\u01d1\20\u018b\1\u018c\2\u018b\1\u01ba"+
    "\3\0\1\307\11\u018b\1\u018c\1\0\2\12\1\u01d2\32\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\16\0\1\u01d3"+
    "\64\0\1\143\75\0\1\u01d4\3\206\1\u01d5\30\206\20\0"+
    "\1\206\6\0\1\206\11\0\1\206\1\0\21\206\1\u01d6"+
    "\13\206\20\0\1\206\6\0\1\206\11\0\1\206\1\0"+
    "\22\206\1\u01d7\12\206\20\0\1\206\1\0\1\u01d8\4\0"+
    "\1\206\11\0\1\206\1\0\4\206\1\u0163\30\206\20\0"+
    "\1\206\6\0\1\206\11\0\1\206\5\0\1\u0164\73\0"+
    "\21\206\1\u0163\13\206\20\0\1\206\6\0\1\206\11\0"+
    "\1\206\1\0\16\206\1\u01d9\16\206\20\0\1\206\6\0"+
    "\1\206\11\0\1\206\17\0\1\u01da\102\0\1\u0164\56\0"+
    "\23\12\1\u0179\11\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\1\0\16\12\1\u01db\16\12\20\0\1\12\6\0"+
    "\1\12\11\0\1\12\1\0\5\12\1\72\27\12\20\0"+
    "\1\12\6\0\1\12\11\0\1\12\17\0\1\u01dc\60\0"+
    "\1\u018b\4\u01b7\1\u01b8\1\u01b7\23\u018c\1\u011b\1\u01cf\1\u011b"+
    "\1\u01cf\3\u018b\2\u01b9\13\u018b\1\u018c\2\u018b\1\u01ba\3\0"+
    "\1\307\11\u018b\1\u018c\1\0\31\307\1\u015a\1\u015b\2\u015a"+
    "\3\0\2\u015c\13\0\1\307\6\0\1\307\4\0\1\311"+
    "\4\0\1\307\1\u018b\4\u018c\1\u01d0\24\u018c\1\312\3\u01d1"+
    "\20\u018b\1\u018c\2\u018b\1\u01ba\3\0\1\307\11\u018b\1\u018c"+
    "\1\0\16\12\1\u01dd\16\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\24\0\1\u01de\54\0\26\206\1\u01df\6\206"+
    "\20\0\1\206\6\0\1\206\11\0\1\206\1\0\22\206"+
    "\1\u01e0\12\206\20\0\1\206\1\0\1\u01e1\4\0\1\206"+
    "\11\0\1\206\1\0\16\206\1\u01e2\16\206\20\0\1\206"+
    "\6\0\1\206\11\0\1\206\1\0\4\206\1\u01e3\30\206"+
    "\20\0\1\206\6\0\1\206\11\0\1\206\5\0\1\u01e4"+
    "\73\0\15\206\1\u0163\17\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\16\0\1\u0164\62\0\15\12\1\u01ac\17\12"+
    "\20\0\1\12\6\0\1\12\11\0\1\12\16\0\1\u01c1"+
    "\62\0\14\12\1\u01e5\20\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\23\0\1\73\34\0\1\73\20\0\35\206"+
    "\20\0\1\u01e6\6\0\1\206\11\0\1\206\1\0\17\206"+
    "\1\u01e7\15\206\20\0\1\206\6\0\1\206\11\0\1\206"+
    "\20\0\1\u01e8\60\0\21\206\1\u01e9\13\206\20\0\1\206"+
    "\6\0\1\206\11\0\1\206\1\0\23\206\1\u01ea\11\206"+
    "\20\0\1\206\6\0\1\206\11\0\1\206\24\0\1\u01eb"+
    "\54\0\17\12\1\u01ec\15\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\1\0\17\206\1\u01ed\15\206\20\0\1\206"+
    "\6\0\1\206\11\0\1\206\1\0\16\206\1\u01ee\16\206"+
    "\20\0\1\206\6\0\1\206\11\0\1\206\17\0\1\u01ef"+
    "\61\0\14\206\1\u01f0\20\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\1\0\35\206\13\0\1\u01f1\4\0\1\206"+
    "\6\0\1\206\11\0\1\206\51\0\1\u01f1\27\0\10\12"+
    "\1\u01f2\24\12\20\0\1\12\1\u01f3\5\0\1\12\11\0"+
    "\1\12\1\0\16\206\1\u01f4\16\206\20\0\1\206\6\0"+
    "\1\206\11\0\1\206\1\0\15\206\1\u01f5\17\206\20\0"+
    "\1\206\6\0\1\206\11\0\1\206\16\0\1\u01f6\62\0"+
    "\22\206\1\u01f7\12\206\20\0\1\206\1\0\1\u01f8\4\0"+
    "\1\206\11\0\1\206\66\0\1\u01f9\1\0\1\u01fa\10\0"+
    "\13\12\1\u01fb\21\12\20\0\1\12\6\0\1\12\11\0"+
    "\1\12\14\0\1\u01fc\64\0\22\206\1\u01fd\12\206\20\0"+
    "\1\206\1\0\1\u01fe\4\0\1\206\11\0\1\206\1\0"+
    "\22\206\1\u01ff\12\206\20\0\1\206\1\0\1\u0200\4\0"+
    "\1\206\11\0\1\206\23\0\1\u0200\34\0\1\u0200\20\0"+
    "\6\206\1\u0163\26\206\20\0\1\206\6\0\1\206\11\0"+
    "\1\206\7\0\1\u0164\70\0\62\u01f9\1\0\3\u01f9\1\u0201"+
    "\1\u0202\10\u01f9\62\u01fa\1\0\4\u01fa\1\u0203\1\u0201\7\u01fa"+
    "\1\0\4\12\1\144\30\12\20\0\1\12\6\0\1\12"+
    "\11\0\1\12\5\0\1\u0204\73\0\23\206\1\u0205\11\206"+
    "\20\0\1\206\6\0\1\206\11\0\1\206\24\0\1\u0206"+
    "\54\0\4\206\1\u0207\30\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\5\0\1\u0208\144\0\1\u0209\25\0\62\u01f9"+
    "\4\0\12\u01f9\62\u01fa\4\0\12\u01fa\22\0\1\73\56\0"+
    "\35\206\20\0\1\u020a\6\0\1\206\11\0\1\206\56\0"+
    "\1\u020b\22\0\35\206\20\0\1\u020c\6\0\1\206\11\0"+
    "\1\206\56\0\1\u020d\22\0\3\206\1\u020e\31\206\20\0"+
    "\1\206\6\0\1\206\11\0\1\206\4\0\1\u020f\74\0"+
    "\7\206\1\u0210\25\206\20\0\1\206\6\0\1\206\11\0"+
    "\1\206\10\0\1\u0211\70\0\1\u0212\34\206\20\0\1\206"+
    "\6\0\1\206\11\0\1\206\1\0\1\u0213\77\0\4\206"+
    "\1\u0214\30\206\20\0\1\206\6\0\1\206\11\0\1\206"+
    "\5\0\1\u0215\73\0\23\206\1\u0216\11\206\20\0\1\206"+
    "\6\0\1\206\11\0\1\206\24\0\1\u0217\54\0\1\u0218"+
    "\34\206\20\0\1\206\6\0\1\206\11\0\1\206\1\0"+
    "\1\u0219\77\0\1\u0163\34\206\20\0\1\206\6\0\1\206"+
    "\11\0\1\206\1\0\1\u0164\77\0\3\206\1\u01a1\31\206"+
    "\20\0\1\206\6\0\1\206\11\0\1\206\4\0\1\u01a4"+
    "\73\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32384];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\5\11\7\1\1\11\6\1\1\11"+
    "\5\1\1\11\7\1\1\0\12\1\1\0\5\1\1\0"+
    "\1\1\1\0\14\1\1\0\3\1\2\0\1\1\4\0"+
    "\2\1\1\0\1\11\1\1\3\11\2\0\2\11\1\1"+
    "\4\0\1\1\1\0\1\11\3\0\10\1\1\0\13\1"+
    "\1\11\2\1\1\0\5\1\1\0\5\1\2\0\5\1"+
    "\1\0\1\1\1\0\4\1\1\0\5\1\1\0\4\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\3\0\3\1"+
    "\2\0\1\1\4\0\14\1\1\0\1\1\1\0\5\1"+
    "\1\0\3\1\1\0\1\1\1\0\5\1\2\0\4\1"+
    "\1\0\4\1\1\0\4\1\1\0\4\1\1\0\1\1"+
    "\1\0\2\1\1\0\6\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\11\1\1\4\0\10\1\1\0\4\1\1\0"+
    "\1\1\1\0\2\1\1\0\17\1\2\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\10\1\1\0\3\1\3\0\1\1\1\11\6\1\2\0"+
    "\3\1\2\0\1\1\1\0\2\1\1\0\4\1\2\0"+
    "\5\1\2\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\4\1\2\0\2\1\1\0\1\1\2\0\5\1\1\0"+
    "\1\1\1\0\3\1\2\0\2\1\1\0\5\1\2\0"+
    "\1\1\1\0\5\1\1\0\2\1\2\0\2\1\2\0"+
    "\1\1\2\0\4\1\1\0\2\1\2\0\3\1\1\0"+
    "\2\1\1\0\1\1\1\0\4\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\3\1\1\0\2\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\3\0\1\1\1\0"+
    "\1\1\1\0\1\1\5\0\1\1\1\0\1\1\1\0"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
LinkedList ListaPHP =new LinkedList();
LinkedList ListaPHPError = new LinkedList();
public String ruta ="";
public void CrearArchivo(){
ruta = ruta.substring(0,ruta.length()-3);
File ArchivoSalida = new File(ruta+"OUT");
BufferedWriter bw;
        try {

           if(ListaPHP.isEmpty() == false && ListaPHP.isEmpty() == true){
                  bw = new BufferedWriter(new FileWriter(ArchivoSalida));

               for(int i = 0; ListaPHP.size()> i; i++ ){
               if(((Yytoken)ListaPHP.get(i)).tipo.equals("estructurasDeControl")){
                String aux = ListaPHP.get(i).toString().toLowerCase();
                ListaPHP.set(i,aux);
                } 
                else if(((Yytoken)ListaPHP.get(i)).tipo.equals("recordset")){
                String aux = ((Yytoken)ListaPHP.get(i)).toString().substring(((Yytoken)ListaPHP.get(i)).toString().indexOf("'")+1, ((Yytoken)ListaPHP.get(i)).toString().lastIndexOf("'"));
                String Entrada = "$recordset['"+aux.toUpperCase()+"']";
                ListaPHP.set(i,Entrada);
                } 
               bw.write(ListaPHP.get(i).toString());
            }
               bw.close();
            }
             
            if(ListaPHPError.isEmpty() == false){
               ArchivoSalida = new File(ruta+"ERR");
               bw = new BufferedWriter(new FileWriter(ArchivoSalida));
               String Errores= "";
               for(int i = 0; ListaPHPError.size()> i; i++ ){
               Errores += ListaPHPError.get(i).toString()+"\n";  
               bw.write(ListaPHPError.get(i).toString()+"\n");
               }
               JOptionPane.showMessageDialog(null, Errores,"Listado de errores",JOptionPane.WARNING_MESSAGE);
               bw.close();
            }
            
            
           
        } catch (IOException ex) {
            Logger.getLogger(Clase.class.getName()).log(Level.SEVERE, null, ex);
        }
}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    CrearArchivo();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Yytoken T = new Yytoken(yytext(),"Error",yyline,yycolumn); ListaPHPError.add(T); System.out.println("Error"+ yyline);
            }
          case 28: break;
          case 2: 
            { Yytoken T = new Yytoken(yytext(),"identificadorConstante",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 29: break;
          case 3: 
            { Yytoken T = new Yytoken(yytext(),"tipoEntero",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 30: break;
          case 4: 
            { Yytoken T = new Yytoken(yytext(),"operandosCompracion",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 31: break;
          case 5: 
            { Yytoken T = new Yytoken(yytext(),"estructurasDeControl",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 32: break;
          case 6: 
            { Yytoken T = new Yytoken(yytext(),"operandosMatematicas",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 33: break;
          case 7: 
            { Yytoken T = new Yytoken(yytext(),"coma",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 34: break;
          case 8: 
            { Yytoken T = new Yytoken(yytext(),"puntoycoma",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 35: break;
          case 9: 
            { Yytoken T = new Yytoken(yytext(),"parentesis",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 36: break;
          case 10: 
            { Yytoken T = new Yytoken(yytext(),"llaves",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 37: break;
          case 11: 
            { Yytoken T = new Yytoken(yytext(),"corchetes",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 38: break;
          case 12: 
            { Yytoken T = new Yytoken(yytext(),"operandosAsignacion",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 39: break;
          case 13: 
            { Yytoken T = new Yytoken(yytext(),"operandosLogicos",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 40: break;
          case 14: 
            { Yytoken T = new Yytoken(yytext(),"pipe",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 41: break;
          case 15: 
            { Yytoken T = new Yytoken(yytext(),"concatenacion",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 42: break;
          case 16: 
            { Yytoken T = new Yytoken(yytext(),"Espacio",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 43: break;
          case 17: 
            { Yytoken T = new Yytoken(yytext(),"Comentario",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 44: break;
          case 18: 
            { Yytoken T = new Yytoken(yytext(),"palabrasReservadas",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 45: break;
          case 19: 
            { Yytoken T = new Yytoken(yytext(),"tipoFlotante",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 46: break;
          case 20: 
            { Yytoken T = new Yytoken(yytext(),"Inicio/Fin PHP",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 47: break;
          case 21: 
            { Yytoken T = new Yytoken(yytext(),"operandoIncrementoDecremento",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 48: break;
          case 22: 
            { Yytoken T = new Yytoken(yytext(),"constantesEnTiempoDeCompilacion",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 49: break;
          case 23: 
            { Yytoken T = new Yytoken(yytext(),"Tipo Cadena",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 50: break;
          case 24: 
            { Yytoken T = new Yytoken(yytext(),"identificadorVariable",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 51: break;
          case 25: 
            { Yytoken T = new Yytoken(yytext(),"booleanos",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 52: break;
          case 26: 
            { Yytoken T = new Yytoken(yytext(),"variablesReservadas",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 53: break;
          case 27: 
            { Yytoken T = new Yytoken(yytext(),"recordset",yyline,yycolumn); ListaPHP.add(T); System.out.println("lo guardo");
            }
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
